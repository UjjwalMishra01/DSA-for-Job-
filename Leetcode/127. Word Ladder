class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        Set<String> wordSet = new HashSet<>(wordList);
        if(!wordSet.contains(endWord)) return 0;

        Queue<String> queue = new LinkedList<>();
        queue.offer(beginWord);
        int level = 1;
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int i=0 ; i<size; i++){
                String currWord = queue.poll();
                char[] currArray  = currWord.toCharArray();
                for(int j=0; j< currArray.length; j++){
                    char originalChar = currArray[j];
                    for(char c= 'a'; c<='z'; c++){
                        currArray[j] = c;
                        String nextWord = new String(currArray);
                        if(nextWord.equals(endWord)) return level+1;
                        if(wordSet.contains(nextWord)){
                            queue.offer(nextWord);
                            wordSet.remove(nextWord);
                        }
                    }
                    currArray[j] = originalChar;
                }
            }
            level++;
        }
        return 0;
    }
}
