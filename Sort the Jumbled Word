https://leetcode.com/problems/sort-the-jumbled-numbers/



class Solution {
    public int replace(int[] mapping, int num) {
        if (num == 0) {
            return mapping[0];
        }

        int result = 0;
        int multiplier = 1;
        while (num > 0) {
            int digit = num % 10;
            result += mapping[digit] * multiplier;
            multiplier *= 10;
            num /= 10;
        }

        return result;
    }

    public int[] sortJumbled(int[] mapping, int[] nums) {
        int[] transformed = new int[nums.length];
        for (int i = 0; i < nums.length; i++) {
            transformed[i] = replace(mapping, nums[i]);
        }

        Integer[] indices = new Integer[nums.length];
        for (int i = 0; i < nums.length; i++) {
            indices[i] = i;
        }

        Arrays.sort(indices, (a, b) -> Integer.compare(transformed[a], transformed[b]));

        int[] sortedNums = new int[nums.length];
        for (int i = 0; i < nums.length; i++) {
            sortedNums[i] = nums[indices[i]];
        }

        return sortedNums;
    }
}
