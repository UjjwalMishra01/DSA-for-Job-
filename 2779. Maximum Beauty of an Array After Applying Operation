Link:- https://leetcode.com/problems/maximum-beauty-of-an-array-after-applying-operation/

Code:- 

import java.util.*;

class Solution {
    // Solves for maximum overlaps using sweep line
    public int solve(int[][] range) {
        List<int[]> events = new ArrayList<>();
        for (int[] interval : range) {
            events.add(new int[]{interval[0], 1}); // Start event
            events.add(new int[]{interval[1] + 1, -1}); // End event (+1 for inclusive end)
        }
        // Sort events: by time, process "end" (-1) before "start" (1) if times are equal
        events.sort((a, b) -> a[0] == b[0] ? Integer.compare(a[1], b[1]) : Integer.compare(a[0], b[0]));

        int maxOverlaps = 0;
        int activeIntervals = 0;

        // Sweep through events
        for (int[] event : events) {
            activeIntervals += event[1];
            maxOverlaps = Math.max(maxOverlaps, activeIntervals);
        }
        return maxOverlaps;
    }

    // Generates the range for each number in nums based on k
    public void generate_range(int[][] range, int[] nums, int k) {
        for (int i = 0; i < nums.length; i++) {
            int start = nums[i] - k;
            int end = nums[i] + k;
            range[i][0] = start;
            range[i][1] = end;
        }
    }

    // Calculates the maximum possible beauty of the array
    public int maximumBeauty(int[] nums, int k) {
        if (nums.length == 0) return 0; // Handle empty array case
        int[][] range = new int[nums.length][2];
        generate_range(range, nums, k);
        return solve(range);
    }
}
