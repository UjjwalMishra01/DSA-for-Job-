The String Puzzle
Problem Description
Ajantha, a book lover who enjoys exploring books, discovered an ancient book one day. Inside, she found an interesting puzzle. The puzzle featured a tree-like structure where each node is a word in an unknown language. Instead of the full hierarchy, she was only given the edges between the words. Additionally, she was provided with another string containing words from the hierarchy and asked to determine the value of this string. The value is calculated by adding the levels of all the words within the string to which they belong, starting from level 1.

Consider the edges are unidirectional from first node to second node. Also note that if a word is not present in the given hierarchy, its level will be -1.

Given the edges between the words and the string as input, calculate and print the value of the string.

Constraints
1 <= number of edges <= 100

1 <= number of words in the input string <= 1000

The words will be having only lowercase alphabets.

Input
First line consists of an integer N, denoting the number of edges.

Next N lines consist of two space separated words, denoting that there exists an edge between them.

Last line consists of a string for which you need to calculate the value.

Output
Single integer denoting the value of the given input string.

Time Limit (secs)
1

Examples
Example 1

Input

9

abcd wxyz

vsmoh bhwbb

crpyc ynkna

bhwbb uhhjm

crpyc eokuo

ynkna abcd

bhwbb uvjyu

vsmoh crpyc

bhwbb enzwb

uhhjm wxyz vsmoh crpyc bhwbb

Output

13

Explanation

Upon processing the input words the following tree-like hierarchy of words will emerge.

com.tcs.cv.automata.ei.middleware.DocxToHtmlConverter@7f4d9395:image1.png

Hence the value of the given string will be 3 (uhhjm) + 5 (wxyz) + 1 (vsmoh) + 2 (crpyc) + 2 (bhwbb) = 13. Hence, print the 13 as the output.

Example 2

Input

5

abc pqr

xyz mno

abc uvw

mno abc

qwe xyz

mno xyz pqr mno pqr uvw abc qwe

Output

28

Explanation

Upon processing the input words the following tree-like hierarchy of words will emerge.

com.tcs.cv.automata.ei.middleware.DocxToHtmlConverter@7f4d9395:image2.png

Hence the value of the given string will be 3 (mno) + 2 (xyz) + 5 (pqr) + 3 (mno) + 5 (pqr) + 5 (uvw) + 4 (abc) + 1 (qwe) = 28. Hence, print 28 as output.



Code:-


from collections import defaultdict, deque

def calculate_string_value(edges, word_string):
    graph = defaultdict(list)
    in_degree = defaultdict(int)
    levels = {}

    # Build the graph
    for u, v in edges:
        graph[u].append(v)
        in_degree[v] += 1
        if u not in in_degree:
            in_degree[u] = 0

    # Topological sorting and level assignment using BFS
    queue = deque([node for node in in_degree if in_degree[node] == 0])
    level = 1

    while queue:
        for _ in range(len(queue)):
            current = queue.popleft()
            levels[current] = level
            for neighbor in graph[current]:
                in_degree[neighbor] -= 1
                if in_degree[neighbor] == 0:
                    queue.append(neighbor)
        level += 1

    # Calculate the value of the string
    words = word_string.split()
    total_value = sum(levels.get(word, -1) for word in words)

    return total_value

# Input
n = int(input())
edges = [input().split() for _ in range(n)]
word_string = input()

# Output
print(calculate_string_value(edges, word_string))
